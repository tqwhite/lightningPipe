'use strict';
var qtools = require('qtools');
qtools = new qtools(this);

module.exports = function(sqlizer) {
	//NOTE: this is called from an assembler. "this" refers to the assembler's scope.

	sqlizer.setBaseTable('Address_Contact');

	sqlizer.mapColumns({
		"Address_Contact.guardianType": function(record) {
			return 'L';
		},
		"Address_Contact.relationship": function(record) {
			var contactCode = record.Address_Contact.contactCode,
				addressTypeCodeString = record.Address_Contact.addressTypeCode.substr(0, 7).toLowerCase(),
				value = contactCode;

			contactCode = contactCode.trim();
			;

			if (!contactCode) {
				value = addressTypeCodeString == 'primary' ? 'Parent/Guardian' : contactCode;
			}


			return value;
		},

		"Address_Contact.studentUniqueIdentifier": function(record) {
			var value = record.Address_Contact.localStudentIdentifier.substr(3)


			return value;
		},

		"Address_Contact.guardianSequence": function(record) {
			var value = record.Address_Contact.addressTypeCode.substr(record.Address_Contact.addressTypeCode.length - 1, 1)

			return value;
		},

		"Address_Contact.legalGuardian": function(record) {
			var addressTypeCodeString = record.Address_Contact.addressTypeCode.substr(0, 7).toLowerCase(),
				value = addressTypeCodeString == 'primary' ? 'Y' : 'N';

			return value;
		},
		"Address_Contact.otherGuardian": function(record) {
			return '';
		},
		"Address_Contact.parentStatus": function(record) {
			return '';
		},
		"Address_Contact.emailAddress": function(record) {
			return '';
		}
	});



	sqlizer.select(function(record) {
		var localStudentIdentifier = record.Address_Contact.localStudentIdentifier;
		if (localStudentIdentifier.toString().length > 3) { //access string indexes are one based
			return true;
		}
		//else
		return false;

	})

	var result = sqlizer.getResult();

	return result;


}
