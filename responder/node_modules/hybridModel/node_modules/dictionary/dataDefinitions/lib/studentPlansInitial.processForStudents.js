'use strict';
var qtools = require('qtools');
qtools = new qtools(this);

module.exports = function(sqlizer) {
	//NOTE: this is called from an assembler. "this" refers to the assembler's scope.

	var tables = sqlizer.tables;

// qtools.dump({'===== tables.Student_Base[0] =====':tables.Student_Base[0]});
// 
// qtools.dump({'===== tables.Student_Enrollment[0] =====':tables.Student_Enrollment[0]});
// qtools.dump({'===== tables.Address_Contact[0] =====':tables.Address_Contact[0]});
// 
// 
// 
// qtools.die();


	sqlizer.reset({
		SE1: qtools.clone(tables.Student_Enrollment),
		SE2: qtools.clone(tables.Student_Enrollment)
	});

	sqlizer.setBaseTable('SE1');
	sqlizer.leftJoin('studentUniqueIdentifier', 'SE2', 'studentUniqueIdentifier');

	sqlizer.indexWorkingTable('SE1.studentUniqueIdentifier');


	sqlizer.summarize('maxentryDate', 'SE1.studentUniqueIdentifier', function(recordSet) {
		var maxDate,
			finalElement;
			
			/*
				make is so that maxDate looks at all elements in SE2
			*/

		for (var i = 0, len = recordSet.length; i < len; i++) {
			var element = recordSet[i];
	 
			for (var j = 0, len2 = element.SE2.length; j < len2; j++) {
				if (!maxDate) {
					maxDate = element.SE2[j].entryDate;
				} else if (+maxDate < +element.SE2[j].entryDate) {
					maxDate = element.SE2[j].entryDate;
					}
			}

		}

			return {
				studentUniqueIdentifier: element.SE1.studentUniqueIdentifier,
				stateStudentIdentifier: element.SE1.stateStudentIdentifier,
				entryDate: maxDate,
				count:recordSet.length,
				source:recordSet
			};
	});

	var maxentryDateTable = sqlizer.getSpecialTable('summaryTables', 'maxentryDate');

	sqlizer.reset(tables);
	sqlizer.addTable('maxentryDate', maxentryDateTable);


	sqlizer.removeDupes('Student_Base');
	sqlizer.removeDupes('Student_Enrollment');

	sqlizer.setBaseTable('Student_Base');


	sqlizer.index('Address_Contact', 'studentUniqueIdentifier');
	sqlizer.index('Student_Enrollment', 'studentUniqueIdentifier');

	sqlizer.leftJoin('studentUniqueIdentifier', 'Address_Contact', 'studentUniqueIdentifier');
	sqlizer.leftJoin('studentUniqueIdentifier', 'Student_Enrollment', 'studentUniqueIdentifier');
	
	sqlizer.leftJoin('studentUniqueIdentifier', 'maxentryDate', 'studentUniqueIdentifier');

// var tmp=qtools.getByProperty(sqlizer.workingTable, 'Student_Base.studentUniqueIdentifier', '0745202000094');
// qtools.dump({'===== tmp =====':tmp});

	var count=0, anySelected=false;
	
var bethSelector = function(record) {

var newEnrollment=[],
		gotMaxEnrollmentData=false,
		enrollmentStatus=false;


	for (var i=0, len=record.Student_Enrollment.length; i<len; i++){
		var element=record.Student_Enrollment[i];
		
		var maxDate=record.maxentryDate[0].entryDate, //by law, there is only one maxentryDate element
			entryDate=element.entryDate;

				if (entryDate && (entryDate == maxDate)){
					newEnrollment.push(element);
					gotMaxEnrollmentData=true;
			
					if (element['enrollmentStatus'] && element['enrollmentStatus'].toLowerCase() == "a"){
						enrollmentStatus=true;
					}
				}
	}

	var newAddress=[],
		addressStatus=false,
		emptyContacts=(qtools.isEmpty(record.Address_Contact))?true:false;
		
	for (var i=0, len=record.Address_Contact.length; i<len; i++){
		var element=record.Address_Contact[i];

		if (element.addressTypeCode.toLowerCase() == "primary1"){
			newAddress.push(element);
			addressStatus=true;
		}

	}
	record.Student_Enrollment=newEnrollment;
	record.Address_Contact=newAddress;


var selected = 
		(
			gotMaxEnrollmentData &&
			(emptyContacts || addressStatus) &&
			(enrollmentStatus)
		);
		
	
		selected=(typeof(selected)=='undefined')?false:selected;
		
		delete record.maxentryDate;
		
// 
// if (record.Student_Enrollment[0].studentUniqueIdentifier=='0745202000094'){
// 		qtools.dump({'===== record =====':record});
// 
// }


		return selected;

	};



	sqlizer.select(bethSelector);
	

	sqlizer.mapColumns({
		"Student_Base.expr1": function(record) {
			var value = record.Student_Enrollment[0].studentResidentSchoolCode; //by the time we get here, the law says only one StudentEnrollment

			if (value == '000') {
				value = "";
			}

			return value;
		},
		"Student_Base.xxx": function(record) {
			var value = record.Student_Base.localStudentIdentifier
			return value;
		},
		"Student_Base.studentUniqueIdentifier": function(record) {
			var value = record.Student_Base.localStudentIdentifier.substr(3)
			return value;
		},
		"Student_Enrollment.nextYearSchool": function() {
			return "";
		},
		"Student_Base.homeroomTeacher": function() {
			return "";
		},
		"Student_Base.counselorIdentifier": function() {
			return "";
		},
		"Student_Base.primaryLanguage": function() {
			return "";
		},
		"Student_Base.totalYearAbsencesExcused": function() {
			return "";
		},
		"Student_Base.totalYearAbsencesUnexcused": function() {
			return "";
		},
		"Student_Base.thisYearIss": function() {
			return "";
		},
		"Student_Base.thisYearOss": function() {
			return "";
		},
		"Student_Base.thisLastYearPromotionStatus": function() {
			return "";
		},
		"Student_Base.lastYearAbsencesExplained": function() {
			return "";
		},
		"Student_Base.lastYearAbsencesUnexplained": function() {
			return "";
		},
		"Student_Base.lastYearIss": function() {
			return "";
		},
		"Student_Base.lastYearOss": function() {
			return "";
		},
		"Student_Base.gpa": function() {
			return "";
		},
		"Student_Base.credits": function() {
			return "";
		}
	});

	var result = sqlizer.getResult();



	return result;
}
