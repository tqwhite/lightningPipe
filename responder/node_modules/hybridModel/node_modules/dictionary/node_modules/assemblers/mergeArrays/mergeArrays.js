'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.ping=qtools.ping;

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'placeholder',
				optional: true
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================



	//METHODS AND PROPERTIES ====================================



	//INITIALIZATION ====================================

this.execute=function(callbackList){
				var list = callbackList,
					outList=[];
					
	var componentNameList=[],
		listLength=0;
	for (var i in list){
		var element=list[i];
		componentNameList.push(i);
		if (listLength===0){
			listLength=element.length;
		}
		else{
			if (listLength!=element.length){
				global.localEnvironment.log.fatal({FATAL:{componentName:i}}, 'mergeArrays() says, lists are not equal length');

			}
		}
	}	

	outList=[];
	for (var i=0, len=listLength; i<len; i++){
		var outObj={};
		for (var j in componentNameList){
			var element=componentNameList[j];
			outObj[element]=callbackList[element][i];
		}
	outList.push(outObj);


	}

return outList;
}

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;