
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util'),
	fs = require('fs');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.ping = qtools.ping;

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'lookupControl',
				optional: false
			},
			{
				name: 'dataSource',
				optional: false
			},
			{
				name: 'dictionary',
				optional: false
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================


	this.processQuery = function(query, databaseName, callback) {
		if (!query) {
			callback({
				error: 'query is empty'
			}, '', query);
			return;
		}
		if (!databaseName) {
			callback({
				error: 'databaseName is empty'
			}, '', query);
			return;
		}


		self.dataSource.dbParameters.access.database = databaseName;

		//log-------
		var showAccessParms = qtools.clone(self.dataSource.dbParameters.access);
		showAccessParms.password = '****';
		delete showAccessParms.options;
		global.localEnvironment.log.debug({
			lightningPipe: {
				source: 'mssqlAccessor.processQuery',
				data: {
					query: query,
					accessParms: showAccessParms
				}
			}
		});
		//end log -----

		var sql = require('mssql');
		var accessParms = self.dataSource.dbParameters.access;
		sql.connect(accessParms, function(err) {
			// ... error checks

			// Query  

			if (err) {
				global.localEnvironment.log.debug({
					lightningPipe: {
						source: 'mssqlAccessor.processQuery.connectionError',
						data: {
							err: err
						}
					}
				});
				callback(err, '', query);

				return;
			}

			var request = new sql.Request();

			// 			var query;
			// 			query = 'select top 10 * from jmc.JmcStudentBase left join';
			// 			query = "select top 1 sb.FullName as student, se.entryDate, se.schoolCode from jmc.jmcStudentBase as sb left join ext.StudentEnrollment as se on se.StateStudentIdentifier=sb.StateStudentIdentifier";
			// 			query="select name from sys.databases WHERE name NOT IN ('master', 'tempdb', 'model', 'msdb'); ";


			request.query(query, function(err, recordset) {
				// ... error checks




				if (err) {

					// qtools.dump({'=-=== err =====':err});
					// console.log('databaseName='+databaseName+'\n');
					// console.log('query='+query+'\n');
					// qtools.dump({'===== recordset =====':recordset});

					global.localEnvironment.log.debug({
						lightningPipe: {
							source: 'mssqlAccessor.processQuery.dataReceiptError',
							data: {
								err: err
							}
						}
					});
					callback(err, '', query);

					return;
				}

				callback('', recordset, query);
			});

			// Stored Procedure

			//     var request = new sql.Request();
			//     request.input('input_parameter', sql.Int, value);
			//     request.output('output_parameter', sql.VarChar(50));
			//     request.execute('procedure_name', function(err, recordsets, returnValue) {
			//         // ... error checks
			// 
			//         console.dir(recordsets);
			//     });

		});
	}

	var extractListInfo = function(rawData) {
		var outList = [];
		for (var i = 0, len = rawData.length; i < len; i++) {
			var element = rawData[i];
			outList.push(element.datum);
		}

		return outList;
	}




	var goGetIt = function() {
		var queryInfo = args.queryInfo,
			databaseName = '',
			query;
		var lookupControl = self.lookupControl;
		if (lookupControl.type == 'list') {
			var directoryCallback = function(err, result) {
				result = extractListInfo(result);
				self.emit('gotRawList', result);

			};
			switch (lookupControl.finalDataName) {

				case 'districts':
					var query = "select name as datum from sys.databases WHERE name NOT IN ('master', 'tempdb', 'model', 'msdb'); ";
					self.processQuery(query, databaseName, directoryCallback);
					break;
				case 'schools':
					var district = qtools.getByProperty(lookupControl.queryInfo, 'name', 'districts');
					var query = "select schoolCode as datum from ext.StudentBase group by schoolCode";
					databaseName = self.serverProfile.mapDistrictAccessName(district.value);
					self.processQuery(query, databaseName, directoryCallback);
					break;
				case 'segments':
					var result = self.dictionary.listDefinitions('simple');
					//should I verify that these tables are there?
					self.emit('gotRawList', result);
					break;
			}

		} else { //we are looking for actual data

			var dataCallback = function(err, result, query) {
				if (err) {
					var errorPackage = {
						message: '===== database call error =====',
						evidence: {
							error: err,
							parameters: lookupControl.databaseParameters
						}
					};
					global.localEnvironment.log.info({
						message: "ERROR: database call error, check debug log for details"
					});
					global.localEnvironment.log.fatal({
						message: "ERROR: database call error, check debug log for details"
					});
					global.localEnvironment.log.debug(errorPackage);
					self.emit('gotBadData', errorPackage);
					return;
				}

				if (typeof (result) == 'undefined') {
					var errorPackage = {
						message: '===== database response was undefined =====',
						evidence: lookupControl.databaseParameters
					};
					global.localEnvironment.log.info({
						message: "ERROR: database response was undefined, check debug log for details"
					});
					global.localEnvironment.log.fatal({
						message: "ERROR: database response was undefined, check debug log for details"
					});
					global.localEnvironment.log.debug(errorPackage);
					self.emit('gotBadData', errorPackage);
					return;
				}

				// 				if (result.length === 0) {
				// 			console.log('NO DATABASE RECORDS= '+query);
				// 					var errorPackage = {
				// 						message: '===== no database records were returned =====',
				// 						evidence: lookupControl.databaseParameters
				// 					};
				// 					global.localEnvironment.log.info({
				// 						message: "ERROR: no database records were returned, check debug log for details"
				// 					});
				// 					global.localEnvironment.log.fatal({
				// 						message: "ERROR: no database records were returned, check debug log for details"
				// 					});
				// 					global.localEnvironment.log.debug(errorPackage);
				// 					self.emit('gotBadData', errorPackage);
				// 					return;
				// 				}

				result = self.serverProfile.mapFieldNamesList(result, 'stripNulls');
				self.emit('gotRawData', result, lookupControl.finalValue);

			} //END OF DATACALLBACK =======================


			var district = qtools.getByProperty(lookupControl.queryInfo, 'name', 'districts');
			var school = qtools.getByProperty(lookupControl.queryInfo, 'name', 'schools');
			var segment = qtools.getByProperty(lookupControl.queryInfo, 'name', 'segments');

			segmentName = self.serverProfile.mapSegmentAccessName(segment.value);
			schoolName = school.value;

			var queryTemplate = lookupControl.sql;

			databaseName = self.serverProfile.mapDistrictAccessName(district.value);


			query = queryTemplate.replace(/<!schoolCode!>/, school.value);

			query = self.serverProfile.mapQueryNames(query);

			lookupControl.databaseParameters = {
				databaseName: databaseName,
				query: query
			};

			self.processQuery(query, databaseName, dataCallback);

		}


	}



	//METHODS AND PROPERTIES ====================================

	this.getRawData = function(callback) {

		//callback is generated in mssqlEngine by generateCallback()

		self.on('gotRawData', function(finalDataList, schemaName) {

			callback('', {
				status: 1,
				type: schemaName,
				data: finalDataList,
				meta: qtools.getMetaData()
			}, self.serverProfile.converterName);
		});

		self.on('gotRawList', function(finalDataList) {

			callback('', {
				status: 1,
				type: 'list',
				data: finalDataList,
				meta: qtools.getMetaData()
			});
		});

		self.on('gotBadData', function(err) {
			err.meta = qtools.mergeMetaData({
				evidence: err.evidence
			});
			delete err.evidence;
			callback(err);
		});


		goGetIt();
	};

	//INITIALIZATION ====================================

	var serverProfilePath = __dirname + '/../../../serverProfiles/';

	try {
		this.serverProfile = require(serverProfilePath + self.dataSource.serverProfile);
	} catch (e) {
		this.serverProfile = require(serverProfilePath + 'defaultServerProfile/');
	}

	this.serverProfile = new this.serverProfile();



	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;


