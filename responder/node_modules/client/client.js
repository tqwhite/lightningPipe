'use strict';
var qtools = require('qtools'),
  qtools = new qtools(module),
  events = require('events'),
  util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
  events.EventEmitter.call(this);
  this.forceEvent = forceEvent;
  this.args = args;

  qtools.validateProperties({
    subject: args,
    targetScope: this, //will add listed items to targetScope
    propList: [
      {
        name: 'req',
        optional: false
      },
      {
        name: 'clientProfileSource',
        optional: false
      }
    ]
  });

  var self = this,
    forceEvent = function(eventName, outData) {
      this.emit(eventName, {
        eventName: eventName,
        data: outData
      });
    };


  //PRIVATE FUNCTIONS ====================================


  var isAllowed = function(name, value) {
    var allowed = self.profileData.dataAccess.allowed[name] ? self.profileData.dataAccess.allowed[name] : [],
      disallowed = self.profileData.dataAccess.disallowed[name] ? self.profileData.dataAccess.disallowed[name] : [],
      result = false;

    if ((qtools.isEmpty(allowed) || allowed.indexOf(value) > -1) &&
      (qtools.isEmpty(disallowed) || disallowed.indexOf(value) < 0)) {
      result = true;
    }
    return result;

  }


  var getProfile = function(userName) {
  
  global.localEnvironment.log.info({auth:"accessed as "+userName});

  
    switch (self.clientProfileSource.type) {
      case 'file':
      if (qtools.realPath(self.clientProfileSource.filePath + userName+'.js')){
        	var clientProfile = require(self.clientProfileSource.filePath + userName);
       }
       else{
  			global.localEnvironment.log.info({auth:"ERROR "+userName+' not found'});
       		var clientProfile={identity:{password:'no such user'}};
       }
       
        break;
      default:
        qtools.die(self.clientProfileSource.type + ' does not yet exist in client.js');
        break;
    }


    qtools.putSurePath(clientProfile, 'dataAccessAvailable.uff.isAllowed', isAllowed);

    self.profileData = clientProfile;
  }




  var executeAuthorization = function(password) {
    if (self.profileData.identity.password === password) {
      self.emit('validAuth');
    } else {
      self.emit('badAuth');
    }
  }
  //METHODS AND PROPERTIES ====================================

  this.auth = function(httpHeaders) {
    getProfile(httpHeaders.username);
    executeAuthorization(httpHeaders.password);
  };

  this.errorResult = function() {
    return self.errorResultData;
  };

  this.setApi = function(api) {
    self.profileData.dataAccess = self.profileData.dataAccessAvailable[api.name];
    self.profileData.dataSource = self.profileData.dataSourceAvailable[api.name];
    self.profileData.dataSource.api = api;
    //if (!dataAccess || !dataSource){ self.emit('lateBadAuth'); //or something
  }


  this.profile = function() {
    return self.profileData;
  };



  //INITIALIZATION ====================================

  this.args = args;

  return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;










