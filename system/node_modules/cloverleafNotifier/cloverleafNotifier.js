'use strict';
var qtools = require('qtools'),
  qtools = new qtools(module),
  events = require('events'),
  util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
  events.EventEmitter.call(this);
  this.forceEvent = forceEvent;
  this.args = args;
  this.metaData = {};
  this.addMeta = function(name, data) {
    this.metaData[name] = data;
  }

  qtools.validateProperties({
    subject: args,
    targetScope: this, //will add listed items to targetScope
    propList: [
      {
        name: 'emailAddressList',
        optional: false
      },
      {
        name: 'smtpSpecs'
      },
      {
      	name:'fromEmailAddress'
      },
      {name:'suppressNotification',
      optional:true
      }
    ]
  });

  var self = this,
    forceEvent = function(eventName, outData) {
      this.emit(eventName, {
        eventName: eventName,
        data: outData
      });
    };


  //LOCAL FUNCTIONS ====================================



  //METHODS AND PROPERTIES ====================================


  this.addInfo = function(message) {
    this.finalMessageArray.push(message);
  }

  this.formatFinalMessage = function(separator) {
    var outMessage = '';
    for (var i = 0, len = this.finalMessageArray.length; i < len; i++) {
      var element = this.finalMessageArray[i];
      outMessage += element + separator;
    }
    return outMessage;
  }

  this.setErrorMode = function() {
    this.errorMode = true;
  }


  this.transmit = function(errorCallback, successCallback) {
    

	if (self.suppressNotification) {
	  if (successCallback) {
		successCallback({
		  response: 'Notification Email Suppressed'
		});
	  } else {
		console.log('NOTIFICATION EMAIL SUPPRESSED');
	  }
	}


    var separator = "<br/>";

    var message = self.formatFinalMessage(separator);

    var nodemailer = require('nodemailer');

    var transporter = nodemailer.createTransport(self.smtpSpecs);

    var mailOptions = {
      from: self.fromEmailAddress,
      to: self.emailAddressList,
      subject: 'Cloverleaf Operation Notification',
      text: message,
      html: message
    };
    
    if (this.errorMode){
    	mailOptions.subject+=" PROCESS FAILED, ERRORS WERE FOUND";
    }
    	var today=new Date();
    	mailOptions.subject+=' ('+today+')';

    transporter.sendMail(mailOptions, function(error, info) {
    
      if (error) {
        if (errorCallback) {
          errorCallback(error);
        } else {
          console.log(error);
        }
      } else {
        if (successCallback) {
          successCallback(info);
        } else {
          console.log('Message sent: ' + info.response);
        }
      }
    });
  }
  //INITIALIZATION ====================================


  this.finalMessageArray = [];
  this.errorMode = false;



  return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;








