'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util'),
	mysql = require('mysql'),
	async = require('async');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'fileName',
				optional: false
			},
			{
				name: 'outputSpec',
				optional: false
			},
			{
				name: 'config',
				optional: false
			}
		]
	});
	qtools.validateProperties({
		subject: this.outputSpec || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'context',
				optional: false
			},
			{
				name: 'control',
				optional: false
			}
		]
	});
	qtools.validateProperties({
		subject: this.context || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'authParms',
				optional: false
			}
		]
	});
	qtools.validateProperties({
		subject: this.control || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'overwrite',
				optional: false
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================


	var showAllCounts = function(next) {
		//this causes a crash
		db.query("show tables;", function(err, rows, fields) {
			if (err) {
				console.log('show tables err=' + err + '\n');
				return;
			}

			for (var i = 0, len = rows.length; i < len; i++) {
				var element = rows[i],
					tableName = qtools.getOnlyProperty(element);

				db.query("select count(*) as 'msyql:" + tableName + "' from " + tableName, function(err, rows, fields) {

					if (err) {
						console.log('show query err=' + err + '\n');
					}
					qtools.dump(rows);
					next();
				});
			}
		});
	}


	var dbIterator = function(queryString, next) {
		db.query(queryString, function(err, rows, fields) {
			if (err) {
				next(err);
				return;
			}
			var result = {
				rows: rows,
				fields: fields
			};
			next(null, result);
		});
	}

	//METHODS AND PROPERTIES ====================================


	var dbIterator = function(queryString, next) {
		db.query(queryString, function(err, result) {
			if (err) {
				next(err);
				return;
			}
			//no result for createTable);
			next();
		});
	}

	var getPropertyNameList = function(sampleRow) {
		var outArray = [];

		for (var propertyName in sampleRow) {
			outArray.push(propertyName);
		}
		return outArray;
	}

	var genCreateTableString = function(tableName, propertyNameArray) {
		var fieldDefString = '',
			outString,
			existingFieldList = [];

		for (var i = 0, len = propertyNameArray.length; i < len; i++) {
			var propertyName = propertyNameArray[i];
			//	fieldDefString += '"' + propertyName + '"' + ' TEXT, '; //sqlite requires weird field names, eg 504flag, to be escaped
			fieldDefString += propertyName + ' TEXT, '; //mysql doesn't allow escaping with either apostrophe or quote

		}

		fieldDefString = fieldDefString.replace(/, $/, '');
		outString = "CREATE TABLE IF NOT EXISTS " + tableName + " (" + fieldDefString + ")";
		return outString;
	}

	var createTables = function(next) {
		var sqlList = [];

		for (var tableName in self.bufferSet) {

			var buffer = self.bufferSet[tableName],
				bufferData = buffer.getBufferData(),
				propertyNameArray = getPropertyNameList(bufferData[0]),
				createTableString = genCreateTableString(tableName, propertyNameArray);

			if (self.control.overwrite == 'all' || qtools.getByProperty(self.control.overwrite || {}, 'tableName', tableName)) {
				sqlList.push("drop table if exists " + tableName);
			}

			self.fieldNameSequenceLists[tableName] = propertyNameArray;
			if (propertyNameArray.length > 0) {
				sqlList.push(createTableString);
			}
		}

		global.localEnvironment.log.debug({
			source: 'mysqlWrite.js',
			type: 'info',
			evidence: {
				'=-=== sqlList =====': sqlList
			}
		});

		async.each(sqlList, dbIterator, function(err, result) {
			if (err) {
				next(err);
				return;
			}
			next();
		});

	}
	var loadOneTable = function(tableName, recList) {


		var fieldNameSequence = self.fieldNameSequenceLists[tableName];
		var baseQuery = "INSERT INTO " + tableName + " VALUES ",
			query = baseQuery,
			batchCounter = 0,
			queryList = [];

		for (var i = 0, len = recList.length; i < len; i++) {
			var element = recList[i],
				rowString = '';

			for (var j = 0, len2 = fieldNameSequence.length; j < len2; j++) {

				var propertyName = fieldNameSequence[j];

				var value = element[propertyName] ? element[propertyName].replace(/'/g, "''") : '';

				rowString += "'" + value + "', ";
			}

			rowString = rowString.replace(/, $/, '');
			query += "(" + rowString + "), ";
			batchCounter++;

			if (batchCounter > 499) {

				query = query.replace(/, $/, '');

				queryList.push(query);

				query = baseQuery;
				batchCounter = 0;
			}
		}

		if (batchCounter) {
			query = query.replace(/, $/, '');
			queryList.push(query);
		}

		return queryList;

	}

	var loadTables = function(next) {
		var queryList = [];

		for (var tableName in self.bufferSet) {

			var buffer = self.bufferSet[tableName],
				bufferData = buffer.getBufferData();

			queryList = queryList.concat(loadOneTable(tableName, bufferData, next));
		}
		async.each(queryList, dbIterator, function() {
			next();
		});
	}

	var initializeDatabase = function(next) {
		var noDbAuth = qtools.clone(self.authParms),
			dbName = noDbAuth.database;
		delete noDbAuth.database;

		db.connect(function(err) {
			if (err && err.code == 'ER_BAD_DB_ERROR') {
				db = mysql.createConnection(noDbAuth);
				db.query('CREATE DATABASE ' + dbName, function(err) {
					db.changeUser({
						database: dbName
					}, function(err) {
						next(err);
					});
				});
				return;
			}
			next(err);
		});
	}

	//INITIALIZATION ====================================

	var db = mysql.createConnection(this.authParms);

	// 	var taskList=[];
	// 	taskList.push('select * from test1');
	// 	
	// 	async.map(taskList, dbIterator, function(err, result) {
	// 		if (err)
	// 			throw err;
	// 		console.log('The solution is: ', result[0].rows[0].first);
	// 	});
	// 
	// 	db.end();


	this.tableName = self.fileName.replace(/\.txt/, '');
	self.fieldNameSequenceLists = {};
	this.bufferSet = {};


	self.takeItAway = function(dataBuffer, fileWriteCallback) {
		this.bufferSet[self.tableName] = dataBuffer;

		var taskList = [];

		var enhancedCallback = function(err, result) {
			var host = self.authParms.host + ":" + self.authParms.database + ":" + self.tableName;
			result = result ? result : {
					targetDataId: host,
					summaryString: dataBuffer.getBufferData().length.toString() + ' rows'
				};

			global.localEnvironment.log.info({
				source: 'mysqlWriter.js',
				type: 'finalInfo',
				evidence: result
			});

			fileWriteCallback(err, result);
		}


		taskList.push(initializeDatabase);
		taskList.push(createTables);
		taskList.push(loadTables);


		async.series(taskList, function(err, row, fields) {
			if (err) {
				throw err;
			}
			enhancedCallback(err);
			db.end();
		});

	}

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;
















