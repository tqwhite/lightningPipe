'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util'),
	fs = require('fs');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.ping=qtools.ping;

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'config',
				optional: false
			}
		]
	});

	
	qtools.validateProperties({
		subject: this.config,
		propList: [
			{
				name: 'lineEnding',
				optional: true
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================

	var combinatorialize = function(inData) {
		var workingData = inData,
			baseElementName,
			outputArray = [],
			initialElement = {};


		for (var i in workingData) {
			var element = workingData[i];
			if (qtools.toType(element) != 'array') {
				if (typeof (baseElementName) == 'undefined') {
					baseElementName = i; //if there is more than one non-list, use the first as the baseElementName
				} else {
					workingData[i] = [element]; //force everyone to be a list
				}
			}
			//else, if they are arrays, they are good
		}

		initialElement[baseElementName] = inData[baseElementName];
		outputArray.push(initialElement);

		// if (workingData.Student_Base && workingData.Student_Base.StudentUniqueIdentifier == '106727') {
		// console.log('baseElementName='+baseElementName+self.lineEnding);
		// qtools.dump(qtools.errorObject("workingData2", workingData));
		// }	

		for (var propertName in workingData) {
			var listToBeAdded = workingData[propertName],
				listToBeMultiplied = qtools.clone(outputArray);

			// if (workingData.Student_Base && workingData.Student_Base.StudentUniqueIdentifier == '106727') {
			// console.log('propertName='+propertName+self.lineEnding);
			// console.log('listToBeAdded.length='+listToBeAdded.length+self.lineEnding);
			// qtools.dump({'===== listToBeMultiplied =====':listToBeMultiplied});
			// }
			outputArray = [];

			if (propertName == baseElementName) {
				outputArray = listToBeMultiplied;
				continue
			}

			if (listToBeAdded.length == 0) {
				for (var j = 0, len2 = listToBeMultiplied.length; j < len2; j++) {
					var newElement = qtools.clone(listToBeMultiplied[j]);

					newElement[propertName] = {};
					outputArray.push(newElement);
				}
			} else {
				for (var i = 0, len = listToBeAdded.length; i < len; i++) {
					var element = listToBeAdded[i];


					for (var j = 0, len2 = listToBeMultiplied.length; j < len2; j++) {
						var newElement = qtools.clone(listToBeMultiplied[j]);

						newElement[propertName] = element;
						outputArray.push(newElement);
					}

				}
			}
		}

		// if (workingData.Student_Base && workingData.Student_Base.StudentUniqueIdentifier == '106727') {
		// qtools.dump(qtools.errorObject("outputArray", outputArray));
		// }				

		return outputArray;


	}

	var simplify = function(inData) {
		/*
		Simplify unfolds complex objects into an equivlent set of simple ones. EG, 
		INPUT ==========
		{ 
			Section_Student: { Student: 'X' },
			Section_Staff: [ { Staff: 'A' }, { Staff: 'B' } ],
			Section: [ { Section: '100' }, { Section: '200' } ],
			Course: [ { Course: 'NAME' } ] 
		} 

		===============================================================
		OUTPUT ==========
		[	{ 
			Section_Student: { Student: 'X' },
			Section_Staff: { Staff: 'A' },
			Section: { Section: '100' },
			Course: { Course: 'NAME' } 
			}, 
		
			{ 
			Section_Student: { Student: 'X' },
			Section_Staff: { Staff: 'A' } ,
			Section: { Section: '200' } ,
			Course: { Course: 'NAME' } 
			},
		
			{ 
			Section_Student: { Student: 'X' },
			Section_Staff: { Staff: 'B' } ,
			Section: { Section: '100' } ,
			Course: { Course: 'NAME' } 
			}, 
		
			{ 
			Section_Student: { Student: 'X' },
			Section_Staff: { Staff: 'B' } ,
			Section: { Section: '200' } ,
			Course: { Course: 'NAME' } 
			} 
		]      

		===============================================================
		*/
		var workingData = qtools.clone(inData),
			outputArray = [];
			
		for (var i = 0, len = workingData.length; i < len; i++) {

			var element = combinatorialize(workingData[i]);
			outputArray = outputArray.concat(element);
			//outputArray=merge(outputArray, element)

		}
		return outputArray
	}

	//METHODS AND PROPERTIES ====================================

	this.flatten = function(inData, flatSpecs) {
		var dottedPathList,
			outString = '',
			workingData;

		flatSpecs = flatSpecs ? flatSpecs : {};

		if (flatSpecs.fieldList) {
			dottedPathList = flatSpecs.fieldList;

			workingData = simplify(inData);

		} else {
			dottedPathList = qtools.extractDottedPaths(inData[0]);
			workingData = inData;
		}

		//starting with v2.0, flat conversion always has header, removed at output depending on user desire
		for (var i = 0, len = dottedPathList.length; i < len; i++) {
			element = dottedPathList[i];
			outString += element + '\t';
		}
		outString += self.lineEnding;

		for (var i = 0, len = workingData.length; i < len; i++) {
			var element = workingData[i];

			for (var j = 0, len2 = dottedPathList.length; j < len2; j++) {
				var path = dottedPathList[j],
					value = qtools.getSurePath(workingData[i], path);

				if (typeof (value) == 'undefined') {
					value = '';
				}
				outString += value + '\t';
			}
			outString += self.lineEnding;

		}



		return outString;
	}

	//INITIALIZATION ====================================


	this.lineEnding=this.config.runtimeParameters.lineEnding?this.config.runtimeParameters.lineEnding:'\n';

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;







