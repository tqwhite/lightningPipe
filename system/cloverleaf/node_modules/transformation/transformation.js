'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util'),
	async = require('async');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{	name:'transformSpecs',
				optional:true
			},
			{	name:'config',
				optional:false
			},
			{
				name:'dataBufferList',
				optional:false
			},
			{
				name:'callback',
				optional:false
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================

	var runTransformation=function(element, next){
		var transformName = element.type,
			parameters = element.parameters ? element.parameters : {};

		var generator = require(transformName),
			transformer = new generator(parameters);
		transformer.execute(self.workingBufferList, function(result) {
		var tmp=element;
			self.workingBufferList = result;
			next('', self.workingBufferList);
		});
	}

	//METHODS AND PROPERTIES ====================================


	//INITIALIZATION ====================================

	this.transformList=[];
	
	self.workingBufferList=this.dataBufferList;
	
	async.eachSeries(this.transformSpecs, runTransformation, function(){ self.callback(self.workingBufferList);});
	
	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;






