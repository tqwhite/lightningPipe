'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util'),
	async = require('async');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}

	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'input',
				optional: false
			},
			{
				name: 'process',
				optional: false
			},
			{
				name: 'export',
				optional: false
			},
			{
				name: 'config',
				optional: false
			}
		]
	});


	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================

	var fillOutputBuffer = function(taskItem, next) {
		var newBuffer = taskItem.buffer,
			tableName = taskItem.tableName,
			exportName = taskItem.exportName,
			query = 'select * from ' + tableName;

		newBuffer.stash(self.bufferSet[tableName].getBufferData());
		self.outBufferList[exportName] = newBuffer;
		next();
	}

	var generateResults = function(next) {
		var taskList = [];

		for (var i = 0, len = self.export.length; i < len; i++) {
			var exportItem = self.export[i],
				newBuffer = new dataBufferGenerator({}),
				taskItem = {
					tableName: exportItem.tableName,
					buffer: newBuffer,
					exportName: exportItem.as
				};

			taskList.push(taskItem);
		}
		async.each(taskList, fillOutputBuffer, function(err, result) {
			if (err) {
				handleError(err);
			}
			next()
		});
	}
	
	//METHODS AND PROPERTIES ====================================


	this.execute = function(inData, callback) {
		self.bufferSet = qtools.clone(inData);
		var outBufferList = {},
			taskList = [];

		taskList.push(generateResults);

		async.series(taskList, function() {
			global.localEnvironment.log.info({
				source: 'passThrough.js',
				type: 'finalResult',
				evidence: self.tableCounts
			});

			callback(self.outBufferList);
		});

	}

	//INITIALIZATION ====================================

	var dataBufferGenerator = require('dataBuffer');

	this.outBufferList = {};

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;














