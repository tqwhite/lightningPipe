'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.metaData = {};
	this.addMeta = function(name, data) {
		this.metaData[name] = data;
	}


	qtools.validateProperties({
		subject: args || {},
		targetScope: this, //will add listed items to targetScope
		propList: []
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};

var changeData=function(){
	
	for (var segmentName in self.bufferSet){
		var element=self.bufferSet[segmentName];
		
	//		var data=segmentName+" passed through "+qtools.ping()+" =========\n"+element.getTabString();
			var data=element.getBufferData();
			element.stash(data, self.callback); //that's right. it just gets it and gives it back.
			self.result[segmentName]=element;
	}
}
	//LOCAL FUNCTIONS ====================================

	this.executeChange=function(inData){
		self.bufferSet=qtools.clone(inData);
		changeData();
	}
	
	this.getResult=function(callback){
		callback(self.result);
	}

	//METHODS AND PROPERTIES ====================================



	//INITIALIZATION ====================================


	self.result={};


	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;






