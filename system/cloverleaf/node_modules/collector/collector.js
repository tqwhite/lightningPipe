'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util'),
	fs = require('fs');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;
	this.ping=qtools.ping;

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'source',
				optional: false
			},
			{
				name: 'dataBuffer',
				optional: false
			},
			{
				name: 'usablePayloadDottedPath',
				optional: true
			},
			{
				name: 'callback',
				optional: false
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});

		};


	//LOCAL FUNCTIONS ====================================


	var writeCallback = function(err, result) {
	//self.callback is cloverleaf.js/notificationCallback
		if (err) {
			self.callback({
				message: 'failed to write data',
				evidence: err
			})
		} else {
			self.callback('', result);
		}
	}

	var receiveData = function(err, result) {
		if (err || result.Status<0) {
			self.callback({
				message: (err && err.data) || (result && result.Error) || 'server access problem',
				evidence: err
			})
		} else {
			//	var data=result.Data.Address_Contact;
			if (self.usablePayloadDottedPath) {
				var data = qtools.getSurePath(result, self.usablePayloadDottedPath);
			} else {
				var data = result;
			}

			if (qtools.toType(data) != 'array') {
				var evidence = {
						dataType: qtools.toType(data),
						badObject: qtools.listProperties(result, 'toString')
					}

				self.callback({
					message: 'incoming data is not an array',
					evidence: evidence
				})
			} else {
				self.dataBuffer.stash(data, writeCallback);
				self.dataBuffer.takeFlatSpecs(result.FlatSpecs);
			}
		}
	}


	//METHODS AND PROPERTIES ====================================

	this.doIt = function() {

		this.source.giveMeTheGoods(receiveData);

	}
	
	//INITIALIZATION ====================================
	

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;







