'use strict';
var qtools = require('qtools'),
	qtools = new qtools(module),
	events = require('events'),
	util = require('util');

//START OF moduleFunction() ============================================================

var moduleFunction = function(args) {
	events.EventEmitter.call(this);
	this.forceEvent = forceEvent;
	this.args = args;

	qtools.validateProperties({
		subject: args,
		targetScope: this, //will add listed items to targetScope
		propList: [
			{
				name: 'uriPath',
				optional: false
			},
			{
				name: 'clientProfile',
				optional: false
			},
			{
				name: 'apiDefinition',
				optional: false
			},
			{
				name: 'parameters',
				optional: false
			},
			{
				name: 'counter',
				optional: true
			}
		]
	});

	var self = this,
		forceEvent = function(eventName, outData) {
			this.emit(eventName, {
				eventName: eventName,
				data: outData
			});
		};


	//LOCAL FUNCTIONS ====================================


	var removeUnauthorizedElements = function(entityNameList, dataName) {
		var allowed = self.clientProfile.dataAccess.allowed[dataName],
			disallowed = self.clientProfile.dataAccess.disallowed[dataName],
			outList = [];

		for (var i = 0, len = entityNameList.length; i < len; i++) {
			var element = entityNameList[i];
			if (self.clientProfile.dataAccess.isAllowed(dataName, element.replace(/\.txt/, ''))) {
				outList.push(element);
			}
		}
		return outList;
	}

	//METHODS AND PROPERTIES ====================================


	this.queryInfo = this.apiDefinition.parse(this.uriPath);


	this.getData = function() {
		switch (self.clientProfile.dataSource.type) {
			case 'file':
				var engineGenerator = require("fileEngine"); 
				break;
			case 'mssql':
				var engineGenerator = require("mssqlEngine"); 
				break;
		}


		var dictionaryGenerator = require("dictionary"),
		dictionary = new dictionaryGenerator({
			dataSource: self.clientProfile.dataSource
		});

		var dataConverterGenerator = require("textToJson");
		
		this.dataConverter = new dataConverterGenerator({
			dictionary: dictionary
		});
		

		var dataEngine = new engineGenerator({
			queryInfo: self.queryInfo,
			clientProfile: self.clientProfile, //factor this up!!
			removeUnauthorizedElements: removeUnauthorizedElements,
			dataConverter: this.dataConverter,
			dictionary: dictionary
		});


		self.on('getDataComplete', function(accessResult) {
			if (accessResult.status > 0) {

				qtools.mergeMetaData(accessResult.meta);
				self.emit('gotData', {
					result: {//stuff in result will go to the client depending on details of the request (ie, some might get left out)
						Data:accessResult.data,
						FlatSpecs:dictionary.flatSpecs()
					}, 
					meta: qtools.mergeMetaData("from convertData() stubb")
				});
			} else {
				self.emit('badData', {
					result: accessResult.data
				});
			}

		});

		self.apiDefinition.checkQuery(function(err, result) {
			if (err) {
				var error = {
					status: -1,
					data: err.data,
					meta: qtools.mergeMetaData(err.meta)
				};

				self.emit('getDataComplete', error);
				return false;

			} else {

				dataEngine
					.executeQuery(function(result) {
					self.emit('getDataComplete', result);
				});
				
			}
		});
	};

	//INITIALIZATION ====================================
	

	return this;
};

//END OF moduleFunction() ============================================================

util.inherits(moduleFunction, events.EventEmitter);
module.exports = moduleFunction;











